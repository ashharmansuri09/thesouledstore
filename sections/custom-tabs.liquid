
{% style %}
  .collection-tabs-wrapper {
  position: relative;
  z-index: 10;
}

.collection-tabs-header {
  position: sticky;
  top: var(--header-height, 220px); /* Adjust based on Dawn header height */
  background: #fff;
  z-index: 1;
  padding:10px 0;
}
.custom-tab-grid{
    display:grid;
    grid-template-columns:repeat(4,1fr);
    gap:15px;
}

button.tab-button {
    font-size: 12px;
    letter-spacing:1px;
    padding: 8px 16px;
    border-radius: 50px;
    border: none;
    cursor:pointer;
}
button.tab-button.active{
  background:#000;
  color:#fff;
}
div.section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }
  .tab-loader img {
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

  @media screen and (min-width: 750px) {
    div.section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{% endstyle %}
<div class="collection-tabs-wrapper  section-{{section.id }}-padding" style="position: sticky; top: 70px; z-index: 1;">
<div class="page-width">
  <div class="collection-tabs-header">
      {% for block in section.blocks %}
        {% assign collection = block.settings.collection %}
        <button class="tab-button" data-tab="{{ block.id }}">{{ collection.title }}</button>
      {% endfor %}
  </div>
  <div class="tab-loader" style="display:none; text-align:center; padding:20px;">
    <img src="https://cdn.shopify.com/s/files/1/0969/2466/4122/files/loader.gif?v=1761385495" alt="Loading..." width="50" height="50">
  </div>
  
    <div class="collection-tabs-content">
      {% for block in section.blocks %}
        {% assign collection = block.settings.collection %}
        <div class="tab-content" data-tab="{{ block.id }}">
          <div class="custom-tab-grid">
            {% for product in collection.products %}
                {% render 'custom-card-product',product:product %}
            {% endfor %}
          </div>
        </div>
      {% endfor %}
    </div>
  </div>
  </div>
  {% schema %}
  {
    "name": "Collection Tabs",
    "settings": [
      {
        "type": "header",
        "content": "t:sections.all.padding.section_padding_heading"
      },
      {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      },
      {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ],
    "blocks": [
      {
        "type": "collection_tab",
        "name": "Collection Tab",
        "settings": [
          {
            "type": "collection",
            "id": "collection",
            "label": "Collection"
          }
        ]
      }
    ],
    "max_blocks": 6,
    "presets": [
      {
        "name": "Collection Tabs"
      }
    ]
  }
  {% endschema %}

  <script>                                                       
      document.addEventListener('DOMContentLoaded', function () {
        const buttons = document.querySelectorAll('.tab-button');
        const contents = document.querySelectorAll('.tab-content');
        const loader = document.querySelector('.tab-loader');
    
        buttons.forEach(btn => {
          btn.addEventListener('click', () => {
            const tabId = btn.dataset.tab;
    
            // Reset all buttons
            buttons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
    
            // Hide all tab contents
            contents.forEach(c => c.style.display = 'none');
    
            // Show loader
            loader.style.display = 'block';
    
            // Delay showing tab content
            setTimeout(() => {
              loader.style.display = 'none';
              const targetContent = document.querySelector(`.tab-content[data-tab="${tabId}"]`);
              if (targetContent) {
                targetContent.style.display = 'block';
              }
            }, 1000); // 5 seconds
          });
        });
    
        // Initialize first tab
        if (buttons.length > 0) {
          buttons[0].click();
        }
      });
    

      document.addEventListener('DOMContentLoaded', () => {
        const header = document.querySelector('.header-wrapper');
        const tabsWrapper = document.querySelector('.collection-tabs-wrapper');
        const tabsHeader = tabsWrapper?.querySelector('.collection-tabs-header');
      
        if (!header || !tabsWrapper || !tabsHeader) return;
      
        const headerHeight = header.offsetHeight;
        const stickyOffset = headerHeight + 10; // 10px spacing
      
        const sentinel = document.createElement('div');
        sentinel.className = 'tabs-end-sentinel';
        tabsWrapper.appendChild(sentinel);
      
        let isSticky = false;
      
        const observer = new IntersectionObserver(
          ([entry]) => {
            const headerBottom = header.getBoundingClientRect().bottom;
            const tabsTop = tabsWrapper.getBoundingClientRect().top;
      
            if (tabsTop - headerBottom <= 10 && entry.isIntersecting) {
              tabsWrapper.classList.add('is-sticky');
              isSticky = true;
            } else {
              tabsWrapper.classList.remove('is-sticky');
              isSticky = false;
            }
          },
          { threshold: [0] }
        );
      
        const releaseObserver = new IntersectionObserver(
          ([entry]) => {
            if (!entry.isIntersecting && isSticky) {
              tabsWrapper.classList.remove('is-sticky');
              isSticky = false;
            }
          },
          { rootMargin: '0px 0px -100% 0px' }
        );
      
        observer.observe(tabsWrapper);
        releaseObserver.observe(sentinel);
      });
      
      
</script>
    